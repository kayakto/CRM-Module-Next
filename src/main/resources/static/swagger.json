{
  "openapi": "3.0.1",
  "info": {
    "title": "CRM module for Uralintern",
    "description": "API documentation for Uralintern CRM Module.\n\n**Контроллеры:**\n- **auth-controller**: Отвечает за регистрацию и авторизацию пользователей, включая регистрацию с реферальной ссылкой и обновление токенов.\n- **user-info-controller**: Управляет пользовательскими данными, включая обновление профиля, получение реферальных ссылок и список руководителей.\n- **event-controller**: Обеспечивает управление мероприятиями, включая их создание, обновление, скрытие, удаление, а также доступ к информации о мероприятиях.\n- **message-controller**: Управляет шаблонами сообщений для мероприятий, включая их получение и обновление.\n- **event-student-controller**: Обеспечивает управление заявками и участием студентов в мероприятиях, включая отправку заявок, их принятие/отклонение и управление студентами на мероприятии.\n- **event-curator-controller**: Управляет заявками и участием кураторов в мероприятиях, включая их принятие/отклонение и управление кураторами.\n- **notification-controller**: Управляет уведомлениями пользователей, связанными с их участием в мероприятиях.\n",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://localhost/api",
      "description": "kayakto server url"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "auth-controller"
    },
    {
      "name": "user-info-controller"
    },
    {
      "name": "event-controller"
    },
    {
      "name": "event-student-controller",
      "description": "Тут вообще ничего не работает, это заготовка для нового backend"
    },
    {
      "name": "Global statuses",
      "description": "Этот контроллер для логики отображения статусов, которые нельзя удалить. Контроллер только для фронта, в коде он не используется. В скором времени удалю."
    },
    {
      "name": "Event statuses"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "operationId": "login",
        "description": "Авторизация пользователя. Возвращает токены доступа и обновления.\nДоступен для всех пользователей.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Успешный вход в систему.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Регистрация пока не работает",
        "tags": [
          "auth-controller"
        ],
        "operationId": "register",
        "description": "Регистрация нового пользователя. Доступно для всех.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Пользователь успешно зарегистрирован.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/auth/register-with-token": {
      "post": {
        "summary": "Регистрация пока не работает",
        "tags": [
          "auth-controller"
        ],
        "operationId": "registerWithToken",
        "description": "Регистрация администратора по токену, полученному от администратора. ВНИМАНИЕ нельзя указывать компетенции и роль, в примере показано.",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequestManager"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "auth-controller"
        ],
        "operationId": "refresh",
        "description": "Обновление токена доступа по рефреш-токену.\nДоступен для всех пользователей с валидным рефреш-токеном.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Токены успешно обновлены.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/users/invite-admin": {
      "post": {
        "tags": [
          "user-info-controller"
        ],
        "operationId": "inviteManager",
        "description": "Создание реферальной ссылки для приглашения администратора. Доступно только администраторам.\n",
        "responses": {
          "200": {
            "description": "Реферальная ссылка успешно создана.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralTokenDTO"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/users/update-password": {
      "post": {
        "tags": [
          "user-info-controller"
        ],
        "operationId": "updatePassword",
        "description": "Обновление пароля пользователя, который сделал запрос. Доступно всем пользователям.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/users/update-email": {
      "post": {
        "tags": [
          "user-info-controller"
        ],
        "operationId": "updateEmail",
        "description": "Обновление почты пользователя, который сделал запрос. Доступно всем пользователям.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "user-info-controller"
        ],
        "operationId": "getCurrentUser",
        "description": "Получение данных текущего пользователя.\nТребуется авторизация.\n",
        "responses": {
          "200": {
            "description": "Данные пользователя успешно получены.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "user-info-controller"
        ],
        "operationId": "updateCurrentUser",
        "description": "Обновление данных текущего пользователя.\nТребуется авторизация.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные пользователя успешно обновлены.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/users/my-role": {
      "get": {
        "tags": [
          "user-info-controller"
        ],
        "operationId": "getMyRole",
        "description": "Получение роли текущего пользователя. Доступно всем пользователям. Вернет роль в виде \"STUDENT\"",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "user-info-controller"
        ],
        "operationId": "getUserById",
        "description": "Получение профиля пользователя по идентификатору. Доступ - все авторизованные пользователи. В будущем может будет ограничение доступа.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events/post": {
      "post": {
        "tags": [
          "event-controller"
        ],
        "operationId": "createEvent",
        "description": "Создание нового мероприятия. Доступно только администраторам.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Мероприятие успешно создано.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events/start-event": {
      "post": {
        "tags": [
          "event-controller"
        ],
        "operationId": "startEvent",
        "description": "Досрочно начать мероприятие. Доступ - администратор и руководитель проекта.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": [
          "event-controller"
        ],
        "operationId": "getEventByID",
        "description": "Получение данных мероприятия по его идентификатору. Доступ - администратор или руководитель.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events/my": {
      "get": {
        "tags": [
          "event-controller"
        ],
        "operationId": "getMyEvents",
        "description": "Получение данных мероприятий, с которыми связан пользователь, отправивший запрос. Доступ: все авторизованные пользователи.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events/active": {
      "get": {
        "tags": [
          "event-controller"
        ],
        "operationId": "getOpenedEvents",
        "description": "Получение мероприятий, доступных для регистрации. Доступно всем авторизованным пользователям.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events/update/{eventId}": {
      "put": {
        "tags": [
          "event-controller"
        ],
        "operationId": "updateEvent",
        "description": "Обновление информации о мероприятии. Доступно администраторам связанным с мероприятием.\n",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "ID мероприятия для обновления.",
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Мероприятие успешно обновлено.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events/hide/{eventId}": {
      "put": {
        "tags": [
          "event-controller"
        ],
        "operationId": "hideEvent",
        "description": "Поменять статус мероприятия на \"скрытое\". Или вернуть состояние мероприятия к обычному. Доступ - руководитель и администратор.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events/delete/{eventId}": {
      "delete": {
        "tags": [
          "event-controller"
        ],
        "operationId": "deleteEvent",
        "description": "Удаление мероприятия. Доступно только администраторам.\n",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "ID мероприятия для удаления.",
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Мероприятие успешно удалено.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events-students/test-result": {
      "post": {
        "tags": [
          "event-student-controller"
        ],
        "operationId": "saveTestResult",
        "description": "Выгрузка баллов за тест студента. Доступно только администраторам.\nВНИМАНИЕ: этот метод для интеграции с сервисом тестов для uralintern\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentTestResultRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Баллы успешно выгрузились.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events-students/{eventId}/student-can-send/{studentId}": {
      "get": {
        "tags": [
          "event-student-controller"
        ],
        "operationId": "canSendStudent",
        "description": "Если студент отправлял заявку на мероприятие - ему не будет доступна регистрация на мероприятие (вернется false). В обратном случае студент сможет отправить заявку на мероприятие (true).",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          },
          {
            "name": "studentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events-students/{eventId}/waiting-students": {
      "get": {
        "tags": [
          "event-student-controller"
        ],
        "operationId": "getWaitingStudentsInfo",
        "description": "Получение студентов, которые ждут принятия заявки на мероприятие. Доступ: руководитель",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventStudentInfoDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events-students/{eventId}/students": {
      "get": {
        "tags": [
          "event-student-controller"
        ],
        "operationId": "getStudentsInfo",
        "description": "Получение студентов, которые связаных с данным мероприятием, учитывая все возможные статусы. Доступ: руководитель",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventStudentInfoDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events-students/{eventId}/accepted-students": {
      "get": {
        "tags": [
          "event-student-controller"
        ],
        "operationId": "getAcceptedStudentsInfo",
        "description": "Получение студентов, которых приняли на мероприятие и их добавили в чат. Доступ: руководитель, администратор.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventStudentInfoDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events-students/{eventId}/started-students": {
      "get": {
        "tags": [
          "event-student-controller"
        ],
        "operationId": "getStartedStudentsInfo",
        "description": "Получение студентов, которые начали выполнение мероприятия. Доступ: руководитель, администратор.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventStudentInfoDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events-students/{eventId}/started-students-group": {
      "get": {
        "tags": [
          "event-student-controller"
        ],
        "operationId": "getStartedStudentsInfoGroup",
        "description": "Получение группы студентов, которые начали выполнение мероприятия и они в одной группе с текущим куратором. Доступ: куратор.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventStudentInfoDTO"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events-students/{eventId}/send/{studentId}": {
      "put": {
        "tags": [
          "event-student-controller"
        ],
        "description": "Отправить студенту заявку на регистрацию на мероприятие. Доступ - студент.",
        "operationId": "sendStudentToEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "идентификатор мероприятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          },
          {
            "name": "studentId",
            "in": "path",
            "description": "идентификатор студента",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events-students/{eventId}/reject/{studentId}": {
      "put": {
        "tags": [
          "event-student-controller"
        ],
        "description": "Отклонить заявку студента на мероприятие. Доступ- руководитель.",
        "operationId": "rejectStudentRequest",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "идентификатор мероприятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          },
          {
            "name": "studentId",
            "in": "path",
            "description": "идентификатор студента",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events-students/{eventId}/accept/{studentId}": {
      "put": {
        "tags": [
          "event-student-controller"
        ],
        "description": "Принять заявку студента на мероприятие. Доступ - руководитель.",
        "operationId": "acceptStudentRequest",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "идентификатор мероприятия",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          },
          {
            "name": "studentId",
            "in": "path",
            "description": "идентификатор студента",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/events-students/{eventId}/delete/{studentId}": {
      "delete": {
        "tags": [
          "event-student-controller"
        ],
        "operationId": "deleteStudentFromEvent",
        "description": "Удаление студента с мероприятия. Доступ - руководитель.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          },
          {
            "name": "studentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          }
        }
      }
    },
    "/statuses": {
      "get": {
        "tags": [
          "Global statuses"
        ],
        "summary": "Получить все глобальные статусы",
        "description": "Возвращает список всех системных статусов, доступных для всех мероприятий",
        "responses": {
          "200": {
            "description": "Успешно получен список статусов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationStatus"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Ошибка сервера"
          }
        }
      },
      "post": {
        "tags": [
          "Global statuses"
        ],
        "summary": "Создать новый глобальный статус",
        "description": "Создает новый системный статус, доступный для всех мероприятий",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusRequest"
              },
              "example": {
                "name": "Одобрено",
                "displayOrder": 3
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Статус успешно создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationStatus"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации:\n- Не указано название\n- Некорректный порядок отображения\n"
          },
          "500": {
            "description": "Ошибка сервера"
          }
        }
      }
    },
    "/statuses/{id}": {
      "put": {
        "tags": [
          "Global statuses"
        ],
        "summary": "Обновить глобальный статус",
        "description": "Изменяет название или порядок отображения системного статуса",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 5,
            "description": "ID статуса для обновления"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Статус успешно обновлен"
          },
          "400": {
            "description": "Некорректные данные"
          },
          "404": {
            "description": "Статус не найден"
          }
        }
      },
      "delete": {
        "tags": [
          "Global statuses"
        ],
        "summary": "Удалить глобальный статус",
        "description": "Удаляет системный статус, если нет связанных заявок",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 5,
            "description": "ID статуса для удаления"
          }
        ],
        "responses": {
          "204": {
            "description": "Статус успешно удален"
          },
          "404": {
            "description": "Статус не найден"
          },
          "409": {
            "description": "Нельзя удалить - есть связанные заявки"
          }
        }
      }
    },
    "/events/{eventId}/statuses": {
      "get": {
        "tags": [
          "Event statuses"
        ],
        "summary": "Получить статусы мероприятия",
        "description": "Возвращает все статусы, связанные с конкретным мероприятием",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 1,
            "description": "ID мероприятия"
          }
        ],
        "responses": {
          "200": {
            "description": "Успешно получен список статусов"
          },
          "404": {
            "description": "Мероприятие не найдено"
          }
        }
      },
      "post": {
        "tags": [
          "Event statuses"
        ],
        "summary": "Добавить статус к мероприятию",
        "description": "Создает новый статус для конкретного мероприятия",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 1,
            "description": "ID мероприятия"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Статус успешно добавлен"
          },
          "400": {
            "description": "Некорректные данные"
          },
          "404": {
            "description": "Мероприятие не найдено"
          },
          "409": {
            "description": "Статус с таким порядком уже существует"
          }
        }
      }
    },
    "/events/{eventId}/statuses/{statusId}": {
      "put": {
        "tags": [
          "Event statuses"
        ],
        "summary": "Обновить статус мероприятия",
        "description": "Изменяет статус конкретного мероприятия",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 1,
            "description": "ID мероприятия"
          },
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 3,
            "description": "ID статуса для обновления"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Статус успешно обновлен"
          },
          "404": {
            "description": "Мероприятие или статус не найдены"
          }
        }
      },
      "delete": {
        "tags": [
          "Event statuses"
        ],
        "summary": "Удалить статус мероприятия",
        "description": "Удаляет статус из мероприятия, если нет связанных заявок",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 1,
            "description": "ID мероприятия"
          },
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 3,
            "description": "ID статуса для удаления"
          }
        ],
        "responses": {
          "204": {
            "description": "Статус успешно удален"
          },
          "404": {
            "description": "Мероприятие или статус не найдены"
          },
          "409": {
            "description": "Нельзя удалить - есть связанные заявки"
          }
        }
      }
    },
    "/forms/standard-fields": {
      "get": {
        "tags": [
          "event-forms"
        ],
        "summary": "Получить все стандартные поля для выбора",
        "description": "Возвращает список всех доступных стандартных полей для форм",
        "responses": {
          "200": {
            "description": "Успешный запрос",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StandardField"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Ошибка сервера"
          }
        }
      }
    },
    "/forms/system-fields": {
      "get": {
        "tags": [
          "event-forms"
        ],
        "summary": "Получить все системные поля",
        "description": "Возвращает список всех системных полей (имя, email и др.)",
        "responses": {
          "200": {
            "description": "Успешный запрос",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemField"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Ошибка сервера",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/forms": {
      "post": {
        "tags": [
          "event-forms"
        ],
        "summary": "Создать новую форму или обновить уже существующую",
        "description": "Создает новую форму с указанными кастомными и системными полями. Также обновляет существующую форму, если на мероприятии она уже существовала.\n\nКастомные поля можно сделать необязательными. В запросе в кастомных полях указывается id поля, обязательно ли оно для заполнения студентом и порядок вывода в форме(относительно кастомных полей). В системных полях указываются все id системных полей с порядком их отображения (относительно системных полей).\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateFormRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Форма успешно создана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormDTO"
                }
              }
            }
          },
          "400": {
            "description": "Неверные параметры запроса"
          },
          "404": {
            "description": "Указанные поля не найдены"
          },
          "500": {
            "description": "Ошибка сервера"
          }
        }
      },
      "get": {
        "tags": [
          "event-forms"
        ],
        "summary": "Получить список форм",
        "description": "Возвращает список всех форм. Можно фильтровать по eventId и включать поля формы.\n",
        "responses": {
          "200": {
            "description": "Успешный запрос",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/FormShortDTO"
                      },
                      {
                        "$ref": "#/components/schemas/FormDTO"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Ошибка сервера"
          }
        }
      }
    },
    "/forms/{eventId}": {
      "get": {
        "tags": [
          "event-forms"
        ],
        "summary": "Получить форму с полями",
        "description": "Возвращает полную информацию о форме со всеми полями",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "ID мероприятия",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успешный запрос",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormDTO"
                }
              }
            }
          },
          "404": {
            "description": "Форма не найдена"
          },
          "500": {
            "description": "Ошибка сервера"
          }
        }
      },
      "delete": {
        "tags": [
          "event-forms"
        ],
        "summary": "Удалить форму на мероприятие",
        "description": "Удаляет форму и все связанные с ней данные",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "ID мероприятия",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Форма успешно удалена"
          },
          "404": {
            "description": "Форма не найдена"
          },
          "500": {
            "description": "Ошибка сервера"
          }
        }
      }
    },
    "/applications": {
      "post": {
        "tags": [
          "applications"
        ],
        "summary": "Отправить новую заявку",
        "description": "Создает новую заявку студента на мероприятие.\nВсе системные поля формы должны быть заполнены, если они обязательные.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Заявка успешно создана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Возможные ошибки:\n- Не заполнены обязательные поля\n- Неверный формат данных\n- Заявка на это мероприятие уже существует\n"
          },
          "404": {
            "description": "Форма или мероприятие не найдены"
          }
        }
      },
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Получить список заявок",
        "description": "Возвращает список заявок с возможностью фильтрации по мероприятию.\nТолько для администраторов.\n",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "ID мероприятия для фильтрации",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "statusId",
            "in": "query",
            "description": "ID статуса для фильтрации",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успешный запрос",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен"
          }
        }
      }
    },
    "/applications/{id}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Получить заявку по ID",
        "description": "Возвращает полную информацию о заявке",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успешный запрос",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Заявка не найдена"
          }
        }
      }
    },
    "/applications/{id}/status": {
      "put": {
        "tags": [
          "applications"
        ],
        "summary": "Обновить статус заявки",
        "description": "Изменяет статус заявки. Доступно только для пользователей с ролью ADMIN.\nДля обновления необходимо передать ID нового статуса в теле запроса.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID заявки",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 123
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "ID нового статуса заявки",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "statusId": {
                    "type": "integer",
                    "format": "int64",
                    "description": "ID статуса для установки",
                    "example": 7
                  }
                },
                "required": [
                  "statusId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Статус заявки успешно обновлен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Неверный запрос. Возможные причины:\n- Не указан ID статуса\n- Указан несуществующий статус\n"
          },
          "401": {
            "description": "Требуется аутентификация"
          },
          "403": {
            "description": "Недостаточно прав (требуется роль ADMIN)"
          },
          "404": {
            "description": "Ресурс не найден. Возможные причины:\n- Заявка с указанным ID не существует\n- Статус с указанным ID не существует\n"
          }
        }
      }
    },
    "/applications/by-event/{eventId}": {
      "get": {
        "tags": [
          "applications"
        ],
        "summary": "Получить все заявки на мероприятие",
        "description": "Возвращает список всех заявок для указанного мероприятия",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "description": "ID мероприятия",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Успешный запрос",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Мероприятие не найдено"
          }
        }
      }
    },
    "/robots/event/{eventId}": {
      "get": {
        "tags": [
          "robots"
        ],
        "summary": "Получить список статусов и их роботов по ID события",
        "description": "Возвращает список статусов, связанных с указанным событием, и каждого из их роботов.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID события"
          }
        ],
        "responses": {
          "200": {
            "description": "Успешный ответ со списком статусов и роботов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusWithRobotsDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Событие не найдено"
          }
        }
      }
    },
    "/robots/{statusId}": {
      "get": {
        "tags": [
          "robots"
        ],
        "summary": "Получить список роботов по статусу",
        "parameters": [
          {
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID статуса заявки"
          }
        ],
        "responses": {
          "200": {
            "description": "Список роботов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RobotDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "robots"
        ],
        "summary": "Добавить нового робота к статусу",
        "description": "Есть три типа роботов: SEND_MESSAGE_WITH_LINK, SEND_MESSAGE, SEND_TEST. В SEND_TEST и SEND_MESSAGE_WITH_LINK обязательно указать поле link. В роботе с типом SEND_MESSAGE поля link не должно быть.\n",
        "parameters": [
          {
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID статуса заявки"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRobotRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Робот создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDTO"
                }
              }
            }
          }
        }
      }
    },
    "/robots/{statusId}/{robotId}": {
      "put": {
        "description": "Есть два типа роботов: SEND_MESSAGE_WITH_LINK и SEND_MESSAGE. В первом обязательно указать поле link. В роботе с типом SEND_MESSAGE поля link не должно быть.\n",
        "tags": [
          "robots"
        ],
        "summary": "Обновить данные робота",
        "parameters": [
          {
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "robotId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRobotRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Робот обновлён",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "robots"
        ],
        "summary": "Удалить робота из статуса",
        "parameters": [
          {
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "robotId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Робот удалён"
          }
        }
      }
    },
    "/status-triggers/{statusId}": {
      "get": {
        "tags": [
          "status-trigger"
        ],
        "summary": "Получить список триггеров, привязанных к статусу",
        "parameters": [
          {
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID статуса"
          }
        ],
        "responses": {
          "200": {
            "description": "Успешный ответ со списком триггеров",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Trigger"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "status-trigger"
        ],
        "summary": "Привязать триггер к статусу",
        "description": "Есть два типа триггеров: перейти по ссылке(LINK_CLICK), и прошел тестирование (TEST_PASSED). В первом нужно указать обязательно link. В TEST_PASSED link не нужен, надо написать condition(условие) и value(значение). Condition бывает трех типов: greater_than, less_than, equals.\n",
        "parameters": [
          {
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID статуса"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkTriggerToStatusRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Триггер успешно привязан к статусу"
          }
        }
      }
    },
    "/status-triggers/{applicationId}/{statusId}/{triggerId}/executed": {
      "get": {
        "tags": [
          "status-trigger"
        ],
        "summary": "Проверка выполнения триггера для заявки",
        "description": "Возвращает true, если указанный триггер уже был выполнен для заявки в заданном статусе, иначе false.",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "description": "ID заявки",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "description": "ID статуса",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "triggerId",
            "in": "path",
            "required": true,
            "description": "ID триггера",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Флаг выполнения триггера",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Заявка, статус или триггер не найдены"
          }
        }
      },
      "patch": {
        "tags": [
          "status-trigger"
        ],
        "summary": "Установить признак выполнения триггера",
        "parameters": [
          {
            "in": "path",
            "name": "applicationId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "triggerId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Признак выполнения успешно установлен"
          }
        }
      }
    },
    "/status-triggers/{statusId}/{triggerId}": {
      "delete": {
        "tags": [
          "status-trigger"
        ],
        "summary": "Удалить триггер из статуса",
        "parameters": [
          {
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "triggerId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Триггер успешно удалён из статуса"
          }
        }
      }
    },
    "/status-triggers/{statusId}/{triggerId}/parameters": {
      "patch": {
        "tags": [
          "status-trigger"
        ],
        "summary": "Обновить параметры привязанного триггера",
        "parameters": [
          {
            "in": "path",
            "name": "statusId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "triggerId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Параметры успешно обновлены"
          }
        }
      }
    },
    "/triggers": {
      "post": {
        "tags": [
          "trigger"
        ],
        "summary": "Создать новый триггер",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTriggerRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Триггер успешно создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              }
            }
          }
        }
      }
    },
    "/triggers/{id}": {
      "get": {
        "tags": [
          "trigger"
        ],
        "summary": "Получить триггер по ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID триггера"
          }
        ],
        "responses": {
          "200": {
            "description": "Успешный ответ с данными триггера",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              }
            }
          },
          "404": {
            "description": "Триггер не найден"
          }
        }
      },
      "delete": {
        "tags": [
          "trigger"
        ],
        "summary": "Удалить триггер по ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID триггера"
          }
        ],
        "responses": {
          "204": {
            "description": "Триггер успешно удалён"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "OkResponse": {
        "description": "OK, запрос выполнен успешно",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MessageResponseDTO"
            }
          }
        }
      },
      "BadRequestResponse": {
        "description": "Bad Request, запрос неверный со стороны клиента",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid argument"
                }
              }
            }
          }
        }
      },
      "ForbiddenResponse": {
        "description": "Forbidden, отказано в доступе",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied"
                }
              }
            }
          }
        }
      },
      "NotFoundResponse": {
        "description": "Not Found, такого элемента не существует",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Event with id 123 not found"
                }
              }
            }
          }
        }
      },
      "InternalServerErrorResponse": {
        "description": "Internal Server Error, запрос вызвал ошибку на сервере",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "CreateTriggerRequest": {
        "type": "object",
        "required": [
          "name",
          "type",
          "parameters"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Название триггера"
          },
          "type": {
            "type": "string",
            "description": "Тип триггера"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": true,
            "description": "Параметры триггера (JSON)"
          }
        }
      },
      "Trigger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LinkTriggerToStatusRequest": {
        "type": "object",
        "required": [
          "triggerId",
          "parameters"
        ],
        "properties": {
          "triggerId": {
            "type": "integer"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "StatusWithRobotsDTO": {
        "type": "object",
        "properties": {
          "statusId": {
            "type": "integer",
            "example": 42
          },
          "robots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RobotDTO"
            }
          }
        }
      },
      "RobotDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "statusId": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "SEND_MESSAGE",
              "SEND_MESSAGE_WITH_LINK"
            ]
          },
          "parameters": {
            "type": "object",
            "additionalProperties": true
          },
          "position": {
            "type": "integer"
          }
        }
      },
      "CreateRobotRequest": {
        "type": "object",
        "required": [
          "name",
          "type",
          "message"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "SEND_MESSAGE",
              "SEND_MESSAGE_WITH_LINK"
            ]
          },
          "message": {
            "type": "string"
          },
          "link": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateRobotRequest": {
        "type": "object",
        "required": [
          "name",
          "message"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "link": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateOrUpdateFormRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "title": {
            "type": "string",
            "example": "Форма для CRM"
          },
          "isTemplate": {
            "type": "boolean",
            "example": true
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CreateOrUpdateFormRequest_FieldSettings"
            },
            "example": {
              "1": {
                "isRequired": true,
                "displayOrder": 1
              },
              "2": {
                "isRequired": true,
                "displayOrder": 2
              },
              "3": {
                "isRequired": true,
                "displayOrder": 3
              }
            }
          },
          "systemFields": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            },
            "example": {
              "1": 1,
              "2": 2,
              "3": 3,
              "4": 4,
              "5": 5,
              "6": 6
            }
          }
        },
        "required": [
          "eventId",
          "title"
        ]
      },
      "CreateOrUpdateFormRequest_FieldSettings": {
        "type": "object",
        "properties": {
          "isRequired": {
            "type": "boolean"
          },
          "displayOrder": {
            "type": "integer"
          }
        }
      },
      "SystemField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "displayOrder": {
            "type": "integer"
          }
        }
      },
      "StandardField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "displayOrder": {
            "type": "integer"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FieldInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "displayOrder": {
            "type": "integer"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FormDTO": {
        "type": "object",
        "properties": {
          "formId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "isTemplate": {
            "type": "boolean"
          },
          "systemFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            }
          }
        }
      },
      "CreateApplicationRequest": {
        "type": "object",
        "required": [
          "eventId",
          "formData"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "example": 1
          },
          "formData": {
            "type": "object",
            "description": "Данные формы, включая все системные поля.\nПример для формы с системными полями (first_name, last_name, email):\n```json\n{\n  \"first_name\": \"Иван\",\n  \"last_name\": \"Иванов\",\n  \"email\": \"ivan@example.com\",\n  \"telegram_url\": \"https://t.me/ivanov\",\n  \"additional_field\": \"Значение\"\n}\n```\n",
            "additionalProperties": true,
            "example": {
              "first_name": "Иван",
              "last_name": "Иванов",
              "surname": "Иванович",
              "email": "ivan@example.com",
              "telegram_url": "https://t.me/ivanov",
              "vk_url": "https://vk.com/ivanov"
            }
          }
        }
      },
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "eventId": {
            "type": "integer",
            "example": 1
          },
          "statusId": {
            "type": "integer",
            "example": 1
          },
          "formData": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateApplicationStatusRequest": {
        "type": "object",
        "required": [
          "statusId"
        ],
        "properties": {
          "statusId": {
            "type": "integer",
            "example": 2
          },
          "reason": {
            "type": "string",
            "example": "Принято на первый этап"
          }
        }
      },
      "FormShortDTO": {
        "type": "object",
        "properties": {
          "formId": {
            "type": "integer",
            "format": "int64"
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "FieldDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Имя"
          },
          "type": {
            "type": "string",
            "example": "text"
          },
          "isRequired": {
            "type": "boolean",
            "example": true
          },
          "displayOrder": {
            "type": "integer",
            "example": 1
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Вариант 1",
              "Вариант 2"
            ]
          }
        }
      },
      "CreateFormRequest": {
        "type": "object",
        "required": [
          "eventId",
          "title",
          "systemFields"
        ],
        "properties": {
          "eventId": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Анкета участника"
          },
          "isTemplate": {
            "type": "boolean",
            "example": false
          },
          "customFieldIds": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "systemFields": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "Объект, где ключи - ID всех системных полей,\nа значения - флаги обязательности для этой формы.\nДолжны быть указаны ВСЕ системные поля.\n",
            "example": {
              "1": true,
              "2": true,
              "3": false,
              "4": true,
              "5": false,
              "6": false
            }
          }
        }
      },
      "UpdateFormRequest": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Обновленная анкета"
          },
          "isTemplate": {
            "type": "boolean",
            "example": false
          },
          "customFieldIds": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "systemFields": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "example": {
              "1": true,
              "2": false
            }
          }
        }
      },
      "ApplicationStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Уникальный идентификатор"
          },
          "name": {
            "type": "string",
            "example": "На рассмотрении",
            "description": "Название статуса"
          },
          "isSystem": {
            "type": "boolean",
            "example": false,
            "description": "Является ли системным"
          },
          "displayOrder": {
            "type": "integer",
            "example": 2,
            "description": "Порядок отображения"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-20T14:30:00Z",
            "description": "Дата последнего обновления"
          },
          "eventId": {
            "type": "integer",
            "example": 5,
            "nullable": true,
            "description": "ID мероприятия (null для системных)"
          }
        }
      },
      "StatusRequest": {
        "type": "object",
        "required": [
          "name",
          "displayOrder"
        ],
        "description": "Данные для создания/обновления статуса",
        "properties": {
          "name": {
            "type": "string",
            "example": "Тестирование",
            "minLength": 2,
            "maxLength": 100,
            "description": "Название статуса (2-100 символов)"
          },
          "displayOrder": {
            "type": "integer",
            "example": 3,
            "minimum": 1,
            "maximum": 100,
            "description": "Порядок отображения (1-100)"
          }
        }
      },
      "FormShortResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Анкета для стажировки"
          },
          "isTemplate": {
            "type": "boolean",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-28T16:15:30.127633+05:00"
          }
        }
      },
      "FormResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "eventId": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Анкета для стажировки"
          },
          "isTemplate": {
            "type": "boolean",
            "example": false,
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-28T16:15:30.127633+05:00"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormFieldResponse"
            }
          }
        }
      },
      "FormFieldResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "formId": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Учебное заведение"
          },
          "type": {
            "type": "string",
            "example": "text"
          },
          "isRequired": {
            "type": "boolean",
            "example": true
          },
          "displayOrder": {
            "type": "integer",
            "example": 1
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "example": [
              "Очная",
              "Заочная"
            ]
          }
        }
      },
      "ApplicationStatusRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название статуса",
            "example": "В обработке"
          },
          "displayOrder": {
            "type": "integer",
            "example": 1
          }
        },
        "required": [
          "name",
          "displayOrder"
        ]
      },
      "UserUpdateRequest": {
        "required": [
          "firstName",
          "lastName",
          "telegramUrl",
          "vkUrl"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Николай"
          },
          "lastName": {
            "type": "string",
            "example": "Путин"
          },
          "surname": {
            "type": "string",
            "example": "Евгеньевич"
          },
          "telegramUrl": {
            "type": "string",
            "example": "https://t.me/kayakto"
          },
          "vkUrl": {
            "type": "string",
            "example": "https://vk.com/kayakto"
          },
          "competencies": {
            "type": "string",
            "example": "Spring Boot, Gradle, git, Java, Docker"
          }
        }
      },
      "UserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 123
          },
          "firstName": {
            "type": "string",
            "example": "Николай"
          },
          "lastName": {
            "type": "string",
            "example": "Иванов"
          },
          "surname": {
            "type": "string",
            "example": "Евгеньевич"
          },
          "telegramUrl": {
            "type": "string",
            "example": "https://t.me/kayakto"
          },
          "vkUrl": {
            "type": "string",
            "example": "https://vk.com/kayakto"
          },
          "role_enum": {
            "type": "string",
            "enum": [
              "ADMIN",
              "CURATOR",
              "MANAGER",
              "STUDENT"
            ],
            "example": "STUDENT"
          },
          "competencies": {
            "type": "string",
            "example": "Spring Boot, Gradle, git, Java, Docker"
          }
        }
      },
      "MessageUpdateRequest": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "integer",
            "format": "int64",
            "example": 40
          },
          "text": {
            "type": "string",
            "example": "Вы приняты на мероприятие \"Продажа часов\". Присоединяйтесь к чату: t.me/chatBitrix"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 40
          },
          "eventId": {
            "type": "integer",
            "format": "int64",
            "example": 34
          },
          "text": {
            "type": "string",
            "example": "Вы приняты на мероприятие \"Продажа часов\". Присоединяйтесь к чату: t.me/chatBitrix"
          },
          "messageStatus": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "DECLINED"
            ],
            "example": "ACCEPTED"
          },
          "editDate": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-01T22:00:00+05:00"
          }
        }
      },
      "EventRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "CRM модуль"
          },
          "description": {
            "type": "string",
            "example": "CRM модуль для мастеров глиняной лепки"
          },
          "adminId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "eventStartDate": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-22T22:00:00+05:00"
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-18T22:00:00+05:00"
          },
          "enrollmentStartDate": {
            "type": "string",
            "format": "date-time",
            "example": "2025-05-01T22:00:00+05:00"
          },
          "enrollmentEndDate": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-22T22:00:00+05:00"
          },
          "numberSeatsStudent": {
            "type": "integer",
            "format": "int32",
            "example": 50
          }
        }
      },
      "StudentTestResultRequest": {
        "type": "object",
        "properties": {
          "studentId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "eventId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "passed": {
            "type": "boolean",
            "example": true
          },
          "score": {
            "type": "integer",
            "format": "int64",
            "example": 100
          }
        }
      },
      "EventDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "status": {
            "type": "string",
            "enum": [
              "PREPARATION",
              "REGISTRATION_OPEN",
              "NO_SEATS",
              "REGISTRATION_CLOSED",
              "IN_PROGRESS",
              "FINISHED",
              "HIDDEN",
              "DELETED"
            ],
            "example": "REGISTRATION_OPEN"
          },
          "description": {
            "type": "string",
            "example": "CRM модуль для мастеров глиняной лепки"
          },
          "title": {
            "type": "string",
            "example": "CRM модуль"
          },
          "adminId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "eventStartDate": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-22T22:00:00+05:00"
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-18T22:00:00+05:00"
          },
          "enrollmentStartDate": {
            "type": "string",
            "format": "date-time",
            "example": "2025-05-01T22:00:00+05:00"
          },
          "enrollmentEndDate": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-22T22:00:00+05:00"
          },
          "numberSeatsStudent": {
            "type": "integer",
            "format": "int32",
            "example": 50
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-22T22:00:00+05:00"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-02-22T22:00:00+05:00"
          }
        }
      },
      "UserRequest": {
        "required": [
          "email",
          "firstName",
          "lastName",
          "sign",
          "telegramUrl",
          "vkUrl"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Николай"
          },
          "lastName": {
            "type": "string",
            "example": "Иванов"
          },
          "surname": {
            "type": "string",
            "example": "Евгеньевич"
          },
          "email": {
            "type": "string",
            "example": "mail@mail.ru"
          },
          "sign": {
            "type": "string",
            "example": "password"
          },
          "telegramUrl": {
            "type": "string",
            "example": "https://t.me/kayakto"
          },
          "vkUrl": {
            "type": "string",
            "example": "https://vk.com/kayakto"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "CURATOR",
              "MANAGER",
              "STUDENT"
            ],
            "example": "STUDENT"
          },
          "competencies": {
            "type": "string",
            "example": "Spring Boot, Gradle, git, Java, Docker"
          }
        }
      },
      "UserRequestManager": {
        "required": [
          "email",
          "firstName",
          "lastName",
          "sign",
          "telegramUrl",
          "vkUrl"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Николай"
          },
          "lastName": {
            "type": "string",
            "example": "Иванов"
          },
          "surname": {
            "type": "string",
            "example": "Евгеньевич"
          },
          "email": {
            "type": "string",
            "example": "mail@mail.ru"
          },
          "sign": {
            "type": "string",
            "example": "password"
          },
          "telegramUrl": {
            "type": "string",
            "example": "https://t.me/kayakto"
          },
          "vkUrl": {
            "type": "string",
            "example": "https://vk.com/kayakto"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "mail123@mail.ru"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "NotificationInfo": {
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "integer",
            "format": "int64",
            "example": 156
          },
          "eventTitle": {
            "type": "string",
            "example": "Продажа часов"
          },
          "messageText": {
            "type": "string",
            "example": "Вы приняты на мероприятие \"Продажа часов\""
          },
          "sent_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-11-01T22:00:00+05:00"
          }
        }
      },
      "EventStudentInfoDTO": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "studentId": {
            "type": "integer",
            "format": "int64",
            "example": 3
          },
          "statusRequest": {
            "type": "string",
            "enum": [
              "SENT_PERSONAL_INFO",
              "REJECTED_FROM_EVENT",
              "ADDED_IN_CHAT",
              "STARTED_EVENT",
              "ENDED_EVENT",
              "DELETED_FROM_EVENT"
            ],
            "example": "SENT_PERSONAL_INFO"
          },
          "firstName": {
            "type": "string",
            "example": "Николай"
          },
          "lastName": {
            "type": "string",
            "example": "Алексеев"
          },
          "surname": {
            "type": "string",
            "example": "Михайлович"
          },
          "competencies": {
            "type": "string",
            "example": "Spring Boot, Gradle, git, Java, Docker"
          },
          "telegramUrl": {
            "type": "string",
            "example": "https://t.me/kayakto"
          },
          "vkUrl": {
            "type": "string",
            "example": "https://vk.com/kayakto"
          },
          "curatorFirstName": {
            "type": "string",
            "example": "Николай"
          },
          "curatorLastName": {
            "type": "string",
            "example": "Путин"
          },
          "curatorSurname": {
            "type": "string",
            "example": "Евгеньевич"
          }
        }
      },
      "EventCuratorInfoDTO": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "curatorId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "curatorStatus": {
            "type": "string",
            "enum": [
              "SENT_PERSONAL_INFO",
              "REJECTED_FROM_EVENT",
              "ADDED_IN_CHAT",
              "STARTED_EVENT",
              "ENDED_EVENT",
              "DELETED_FROM_EVENT"
            ],
            "example": "REJECTED_FROM_EVENT"
          },
          "firstName": {
            "type": "string",
            "example": "Владислав"
          },
          "lastName": {
            "type": "string",
            "example": "Путин"
          },
          "surname": {
            "type": "string",
            "example": "Николаевич"
          },
          "competencies": {
            "type": "string",
            "example": "Spring Boot, Gradle, git, Java, Docker"
          },
          "telegramUrl": {
            "type": "string",
            "example": "https://t.me/kayakto"
          },
          "vkUrl": {
            "type": "string",
            "example": "https://vk.com/kayakto"
          }
        }
      },
      "TokensDTO": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string"
          },
          "refresh": {
            "type": "string"
          }
        }
      },
      "ReferralTokenDTO": {
        "type": "object",
        "properties": {
          "referralToken": {
            "type": "string"
          }
        }
      },
      "StartEventRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64",
            "example": 123
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "properties": {
          "refresh": {
            "type": "string"
          }
        }
      },
      "MessageResponseDTO": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "EmailUpdateRequest": {
        "type": "object",
        "properties": {
          "oldEmail": {
            "type": "string"
          },
          "newEmail": {
            "type": "string"
          }
        }
      },
      "PasswordUpdateRequest": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User with email email123@gmail.com not found"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}