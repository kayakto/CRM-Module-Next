package org.bitebuilders.telegram.service;


import org.bitebuilders.telegram.model.Application;
import org.bitebuilders.telegram.repository.ApplicationRepository;
import org.bitebuilders.telegram.repository.TelegramUserRepository;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class TelegramUserService {

    private final ApplicationRepository applicationRepository;
    private final TelegramUserRepository telegramUserRepository;
    private final TelegramStateService stateService;

    public TelegramUserService(
            ApplicationRepository applicationRepository,
            TelegramUserRepository telegramUserRepository,
            TelegramStateService stateService
    ) {
        this.applicationRepository = applicationRepository;
        this.telegramUserRepository = telegramUserRepository;
        this.stateService = stateService;
    }

    public SendMessage handleStart(Message msg) {
        Long telegramId = msg.getFrom().getId();
        String telegramUsername = msg.getFrom().getUserName();
        String chatId = msg.getChatId().toString();

        String telegramUrl = "https://t.me/" + telegramUsername;
        List<Application> apps = applicationRepository.findAllByTelegramUrl(telegramUrl);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());

        if (apps.size() > 1) {
            message.setText("–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:");

            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            for (Application application : apps) {
                InlineKeyboardButton button = new InlineKeyboardButton();
                button.setText("üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ID " + application.getEventId());
                button.setCallbackData("select_event:" + application.getId()); // callbackData –º–æ–∂–µ—Ç –±—ã—Ç—å ID –∑–∞—è–≤–∫–∏

                rows.add(List.of(button));
            }

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            markup.setKeyboard(rows);

            message.setReplyMarkup(markup);
        }
        return message;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–∂–∏–¥–∞–Ω–∏–µ email –∏ –ø—Ä–æ—á–µ–µ)
     */
    public SendMessage handleOther(Message msg) {
        Long telegramId = msg.getFrom().getId();
        String telegramUsername = msg.getFrom().getUserName();
        String chatId = msg.getChatId().toString();
        String text = msg.getText().trim();

        if (stateService.isWaitingForEmail(telegramId)) {
            Optional<Application> application = applicationRepository.findByEmail(text);

            if (application.isPresent()) {
                Application app = application.get();
                applicationRepository.updateTelegramUrl(app.getId(), "https://t.me/" + telegramUsername);
                telegramUserRepository.saveIfNotExists(telegramId, telegramUsername, app.getId());
                stateService.clearWaiting(telegramId);

                return new SendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –í–∞—Å –Ω–∞—à–ª–∏. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: " + app.getEventId());
            } else {
                return new SendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }

        return new SendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.");
    }
}
